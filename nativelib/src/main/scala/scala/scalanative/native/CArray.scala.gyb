package scala.scalanative
package native

import scalanative.runtime._

final class CArray[T, N <: Nat](private[scalanative] val rawptr: RawPtr) {

  @inline def at(idx: Int)(implicit tag: Tag.CArray[T, N]): Ptr[T] =
    fromRawPtr[T](rawptr).+(idx)(tag.of)

  @inline def apply(idx: Int)(implicit tag: Tag.CArray[T, N]): T =
    fromRawPtr[T](rawptr).apply(idx)(tag.of)

  @inline def update(idx: Int, value: T)(implicit tag: Tag.CArray[T, N]): Unit =
    fromRawPtr[T](rawptr).update(idx, value)(tag.of)

  % for fld in range(1, 23):

  def _${fld}(implicit tag: Tag.CArray[T, N]): T =
    fromRawPtr[T](rawptr).apply(${fld - 1})(tag.of)

  def _${fld}_=(value: T)(implicit tag: Tag.CArray[T, N]): Unit =
    fromRawPtr[T](rawptr).apply(${fld - 1})(tag.of)

  % end
}

