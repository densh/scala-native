package scala.scalanative
package native

import scalanative.runtime.RawPtr
import scalanative.runtime.Intrinsics._

% for N in range(0, 23):
%    Ts = "" if N == 0 else "[" + ", ".join("T" + str(i) for i in range(1, N + 1)) + "]"
%    underscores = "" if N == 0 else "[" + ", ".join("_" for i in range(0, N)) + "]"

final class CStruct${N}${Ts}(private[scalanative] val rawptr: RawPtr) {
  override def equals(other: Any): Boolean =
    (this eq other.asInstanceOf[AnyRef]) || (other match {
      case other: CStruct${N}${underscores} =>
        other.rawptr == rawptr
      case _ =>
        false
    })

  override def hashCode: Int =
    java.lang.Long.hashCode(castRawPtrToLong(rawptr))

  override def toString: String =
    "CStruct${N}@" + java.lang.Long.toHexString(castRawPtrToLong(rawptr))

  % for F in range(1, N + 1):

  /** Load a value of a field number ${F}. */
  def _${F}(implicit tag: Tag.CStruct${N}${Ts}): T${F} = {
    val ptr = new Ptr[T${F}](elemRawPtr(rawptr, tag.offset(${F - 1})))
    ptr.unary_!(tag._${F})
  }

  /** Store a value to a field number ${F}. */
  def _${F}_=(value: T${F})(implicit tag: Tag.CStruct${N}${Ts}): Unit = {
    val ptr = new Ptr[T${F}](elemRawPtr(rawptr, tag.offset(${F - 1})))
    ptr.`unary_!_=`(value)(tag._${F})
  }

  % end
}

% end
