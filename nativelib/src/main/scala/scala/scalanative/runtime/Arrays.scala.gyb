package scala.scalanative
package runtime

import scalanative.native._
import scalanative.runtime.Intrinsics._
import scalanative.runtime.LLVMIntrinsics._

sealed abstract class Array[T]
    extends java.io.Serializable
    with java.lang.Cloneable {

  /** Number of elements of the array. */
  @inline def length: Int = {
    val rawptr = castObjectToRawPtr(this)
    val lenptr = elemRawPtr(rawptr, sizeof[Ptr[Byte]])
    loadInt(lenptr)
  }

  /** Size between elements in the array. */
  def stride: CSize

  /** Pointer to the element. */
  def at(i: Int): RawPtr

  /** Loads element at i, throws IndexOutOfBoundsException. */
  def apply(i: Int): T

  /** Stores value to element i, throws IndexOutOfBoundsException. */
  def update(i: Int, value: T): Unit

  /** Create a shallow copy of given array. */
  override def clone(): Array[T] = ??? // overriden in concrete classes
}

object Array {
  final val HeaderSize = 16

  @noinline def throwIndexOutOfBoundsException(i: Int): Nothing =
    throw new IndexOutOfBoundsException(i.toString)

  def copy(from: AnyRef,
           fromPos: Int,
           to: AnyRef,
           toPos: Int,
           len: Int): Unit = {
    if (from == null || to == null) {
      throw new NullPointerException()
    } else if (!from.isInstanceOf[Array[_]]) {
      throw new IllegalArgumentException("from argument must be an array")
    } else if (!to.isInstanceOf[Array[_]]) {
      throw new IllegalArgumentException("to argument must be an array")
    } else {
      copy(from.asInstanceOf[Array[_]],
           fromPos,
           to.asInstanceOf[Array[_]],
           toPos,
           len)
    }
  }

  def copy(from: Array[_],
           fromPos: Int,
           to: Array[_],
           toPos: Int,
           len: Int): Unit = {
    if (from == null || to == null) {
      throw new NullPointerException()
    } else if (getType(from) != getType(to)) {
      throw new ArrayStoreException("Invalid array copy.")
    } else if (len < 0) {
      throw new IndexOutOfBoundsException("length is negative")
    } else if (fromPos < 0 || fromPos + len > from.length) {
      throw new IndexOutOfBoundsException(fromPos.toString)
    } else if (toPos < 0 || toPos + len > to.length) {
      throw new IndexOutOfBoundsException(toPos.toString)
    } else if (len == 0) {
      ()
    } else {
      val fromPtr = from.at(fromPos)
      val toPtr   = to.at(toPos)
      val size    = to.stride * len
      libc.memmove(toPtr, fromPtr, size)
    }
  }

  def compare(left: AnyRef,
              leftPos: Int,
              right: AnyRef,
              rightPos: Int,
              len: Int): Int = {
    if (left == null || right == null) {
      throw new NullPointerException()
    } else if (!left.isInstanceOf[Array[_]]) {
      throw new IllegalArgumentException("left argument must be an array")
    } else if (!right.isInstanceOf[Array[_]]) {
      throw new IllegalArgumentException("right argument must be an array")
    } else {
      compare(left.asInstanceOf[Array[_]],
              leftPos,
              right.asInstanceOf[Array[_]],
              rightPos,
              len)
    }
  }

  def compare(left: Array[_],
              leftPos: Int,
              right: Array[_],
              rightPos: Int,
              len: Int): Int = {
    if (left == null || right == null) {
      throw new NullPointerException()
    } else if (getType(left) != getType(right)) {
      throw new ArrayStoreException("Invalid array copy.")
    } else if (len < 0) {
      throw new IndexOutOfBoundsException("length is negative")
    } else if (leftPos < 0 || leftPos + len > left.length) {
      throw new IndexOutOfBoundsException(leftPos.toString)
    } else if (rightPos < 0 || rightPos + len > right.length) {
      throw new IndexOutOfBoundsException(rightPos.toString)
    } else if (len == 0) {
      0
    } else {
      val leftPtr  = left.at(leftPos)
      val rightPtr = right.at(rightPos)
      libc.memcmp(leftPtr, rightPtr, len * left.stride)
    }
  }
}

%{
   types = ['Unit', 'Boolean', 'Char', 'Byte', 'Short',
            'Int', 'Long', 'Float', 'Double', 'Object']
}%

% for T in types:

%{
   alloc = 'GC.alloc_atomic' if T != 'Object' and T != 'Unit' else 'GC.alloc'
}%

final class ${T}Array private () extends Array[${T}] {
  import Array._

  @inline def stride: CSize =
    sizeof[${T}]

  @inline def at(i: Int): RawPtr =
    if (i < 0 || i >= length) {
      throwIndexOutOfBoundsException(i)
    } else {
      val rawptr = castObjectToRawPtr(this)
      elemRawPtr(rawptr, HeaderSize + stride * i)
    }

  @inline def apply(i: Int): ${T} =
    if (i < 0 || i >= length) {
      throwIndexOutOfBoundsException(i)
    } else {
      val rawptr = castObjectToRawPtr(this)
      val ith    = elemRawPtr(rawptr, HeaderSize + stride * i)
      % if T != 'Unit':
      load${T}(ith)
      % else:
      loadObject(ith).asInstanceOf[Unit]
      % end
    }

  @inline def update(i: Int, value: ${T}): Unit =
    if (i < 0 || i >= length) {
      throwIndexOutOfBoundsException(i)
    } else {
      val rawptr = castObjectToRawPtr(this)
      val ith    = elemRawPtr(rawptr, HeaderSize + stride * i)
      % if T != 'Unit':
      store${T}(ith, value)
      % else:
      storeObject(ith, value.asInstanceOf[Object])
      % end
    }

  @inline override def clone(): ${T}Array = {
    val arrinfo = typeof[${T}Array]
    val arrsize = HeaderSize + sizeof[${T}] * length
    val arr     = ${alloc}(arrinfo, arrsize)
    val src     = castObjectToRawPtr(this)
    libc.memcpy(arr, src, arrsize)
    castRawPtrToObject(arr).asInstanceOf[${T}Array]
  }
}

object ${T}Array {
  import Array._

  @inline def alloc(length: Int): ${T}Array = {
    val arrinfo = typeof[${T}Array]
    val arrsize = HeaderSize + sizeof[${T}] * length
    val arr     = ${alloc}(arrinfo, arrsize)
    storeInt(elemRawPtr(arr, 8), length)
    storeInt(elemRawPtr(arr, 12), sizeof[${T}].toInt)
    castRawPtrToObject(arr).asInstanceOf[${T}Array]
  }

  @inline def snapshot(length: Int, data: RawPtr): ${T}Array = {
    val arr  = alloc(length)
    val dst  = arr.at(0)
    val src  = castObjectToRawPtr(data)
    val size = sizeof[${T}] * length
    libc.memcpy(dst, src, size)
    arr
  }
}
% end
